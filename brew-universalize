#!/usr/bin/env bash

set -e

for COMMAND_DEPENDENCY in "jq" "wget"; do
  if ! command -v $COMMAND_DEPENDENCY &> /dev/null; then
      printf "'$COMMAND_DEPENDENCY' could not be found. Install via: brew install $COMMAND_DEPENDENCY\n" >&2
      exit 1
  fi
done

HOMEBREW_PREFIX=$(brew --prefix)

ARCH_THIS=$(uname -m)
ARCH_OTHER=$([ "$ARCH_THIS" == "arm64" ] && echo "x86_64" || echo "arm64")
/usr/bin/sw_vers -productVersion
MACOS_VERSION=$(/usr/bin/sw_vers -productVersion)

case $MACOS_VERSION in
14.*) MACOS_RELEASE="sonoma" ;;
13.*) MACOS_RELEASE="ventura" ;;
12.*) MACOS_RELEASE="monterey" ;;
11.*) MACOS_RELEASE="big_sur" ;;
10.15.*) MACOS_RELEASE="catalina" ;;
10.14.*) MACOS_RELEASE="mojave" ;;
10.13.*) MACOS_RELEASE="high_sierra" ;;
10.12.*) MACOS_RELEASE="sierra" ;;
10.11.*) MACOS_RELEASE="el_capitan" ;;
esac

if [ -z "$MACOS_RELEASE" ]; then
  printf "Cannot get macOS release from version: $MACOS_VERSION\n" >&2
  exit 1
fi

DOWNLOAD_PROPERTY="$([ "$ARCH_OTHER" == "x86_64" ] && echo "" || echo "${ARCH_OTHER}_")$MACOS_RELEASE"

WORK_DIR=$(mktemp -d)

echo "Homebrew prefix: $HOMEBREW_PREFIX"
echo "macOS release: $MACOS_RELEASE [$ARCH_THIS]"
echo "brew info download property: $DOWNLOAD_PROPERTY"
echo "Work directory: $WORK_DIR"

DOWNLOAD_URLS=$(brew info --json $@ | jq -r '.[] | .bottle.stable.files[. = "'$DOWNLOAD_PROPERTY'"].url')

echo "$DOWNLOAD_URLS" | wget -P $WORK_DIR --header "Authorization: Bearer QQ==" -i -

for DOWNLOAD_URL in $DOWNLOAD_URLS; do
  tar xfz $WORK_DIR/$(basename $DOWNLOAD_URL) -C $WORK_DIR
done

for MERGING_LIB in $(find $WORK_DIR -iname '*.dylib' -type f); do
  EXISTING_LIB="${MERGING_LIB/$WORK_DIR/$HOMEBREW_PREFIX/Cellar}"
  MERGING_ARCH=$(lipo -archs $MERGING_LIB)

  if [ ! -f $EXISTING_LIB ]; then
    echo "$EXISTING_LIB does not exist to merge $MERGING_LIB [$MERGING_ARCH]"
    continue
  fi

  EXISTING_ARCH=$(lipo -archs $EXISTING_LIB)

  if [ "$EXISTING_ARCH" = "x86_64 arm64" ]; then
    echo "$EXISTING_LIB [$EXISTING_ARCH] -> already universal"
    continue
  fi

  BACKUP_FILENAME=${EXISTING_LIB%.dylib}.$EXISTING_ARCH.dylib

  echo "$EXISTING_LIB [$EXISTING_ARCH] -> $BACKUP_FILENAME and merging $MERGING_LIB [$MERGING_ARCH]"

  if [ ! -f $BACKUP_FILENAME ]; then
    cp $EXISTING_LIB $BACKUP_FILENAME
  fi

  lipo -create $BACKUP_FILENAME $MERGING_LIB -output $EXISTING_LIB
done

rm -rf $WORK_DIR
